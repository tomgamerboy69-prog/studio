// This is an autogenerated file from Genkit, do not modify.
'use server';

/**
 * @fileOverview Suggests items based on past purchases.
 *
 * - suggestItemsBasedOnPastPurchases - A function that suggests items based on past purchases.
 * - SuggestItemsBasedOnPastPurchasesInput - The input type for the suggestItemsBasedOnPastPurchases function.
 * - SuggestItemsBasedOnPastPurchasesOutput - The return type for the suggestItemsBasedOnPastPurchases function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestItemsBasedOnPastPurchasesInputSchema = z.object({
  pastPurchases: z.array(z.string()).describe('A list of past purchases.'),
  currentList: z.array(z.string()).optional().describe('The current shopping list, if any.'),
  occasion: z.string().optional().describe('The occasion for the shopping list, if any.'),
});
export type SuggestItemsBasedOnPastPurchasesInput = z.infer<
  typeof SuggestItemsBasedOnPastPurchasesInputSchema
>;

const SuggestItemsBasedOnPastPurchasesOutputSchema = z.object({
  suggestedItems: z.array(z.string()).describe('A list of suggested items.'),
});
export type SuggestItemsBasedOnPastPurchasesOutput = z.infer<
  typeof SuggestItemsBasedOnPastPurchasesOutputSchema
>;

export async function suggestItemsBasedOnPastPurchases(
  input: SuggestItemsBasedOnPastPurchasesInput
): Promise<SuggestItemsBasedOnPastPurchasesOutput> {
  return suggestItemsBasedOnPastPurchasesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestItemsBasedOnPastPurchasesPrompt',
  input: {
    schema: SuggestItemsBasedOnPastPurchasesInputSchema,
  },
  output: {
    schema: SuggestItemsBasedOnPastPurchasesOutputSchema,
  },
  prompt: `You are a shopping assistant. Based on the past purchases and current shopping list, suggest other items to add to the list.

Past Purchases:
{{#each pastPurchases}}- {{this}}\n{{/each}}

{{#if currentList}}
Current Shopping List:
{{#each currentList}}- {{this}}\n{{/each}}
{{/if}}

{{#if occasion}}
Occasion: {{occasion}}
{{/if}}

Suggest items that are commonly purchased together with the past purchases, or that are related to the current shopping list or occasion.
If the current shopping list already has an item do not suggest it again.
Format each item with a single line, a dash, and then the item name.
`, // Ensure there's a newline at the end to prevent unexpected token errors
});

const suggestItemsBasedOnPastPurchasesFlow = ai.defineFlow(
  {
    name: 'suggestItemsBasedOnPastPurchasesFlow',
    inputSchema: SuggestItemsBasedOnPastPurchasesInputSchema,
    outputSchema: SuggestItemsBasedOnPastPurchasesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
